#!/usr/bin/env node

'use strict';

var fs = require('fs');
var path = require('path');
var commander = require('commander');
var spawn = require('child_process').spawn;
var Stream = require('stream').Stream;
var proc = require('procstreams');
var color = require('colorful');
var Bump = require('..');

var pkg = require(process.cwd() + '/package.json');

commander
  .version(require('../package.json').version)
  .option('-v, --verbose', '')
  .option('-M, --major', 'major +1')
  .option('-m, --minor', 'minor +1')
  .option('-p, --patch', 'patch +1')
  .parse(process.argv);

var version = bumpVersion(pkg.version);
updatePackage(version, function() {
  push(function() {
    createTag(version, function() {
      publish(function() {
        console.log('>> done');
      });
    });
  });
});

function bumpVersion(version) {
  update(fs.readFileSync(pkg), commander);
  var bump;
  try {
    bump = new Bump(version)
      .on('error', exit);
  } catch(err) {
    exit(err);
  }

  if (commander.args[0]) {
    bump.version(commander.args[0]);
  } else {
    var v = ['major', 'minor', 'patch'];
    for (var i in v) {
      if (commander[v[i]]) {
        bump[v[i]]();
      }
    }
  }
  return bump.toString();

  function exit(err) {
    console.error('>> ' + color.red(err));
    process.exit(1);
  }
}

function updatePackage(version, cb) {
  if (version !== pkg.version) {
    pkg.version = version;
    var fp = path.join(process.cwd(), 'package.json');
    fs.writeFile(fp, JSON.stringify(pkg, null, '  '), function(err) {
      onData('edited package.json ' + version, 'failed to edit package.json')(err);
      proc('git add package.json')
        .data(onData('added package.json', 'failed to git add'))
        .and('git commit -m "bump ' + version + '"')
        .data(onData('commited', 'failed to git commit'))
        .on('close', fixCb(cb));
    });
  } else {
    cb();
  }
}

function push(cb) {
  proc('git rev-parse --abbrev-ref HEAD')
    .pipe(createPushStream())
    .on('close', fixCb(cb));

  // git push origin master
  function createPushStream() {
    var stream = new Stream();
    stream.writable = true;
    stream.readable = true;

    var data = '';
    stream.write = function (buf) {
      data += buf;
    };
    stream.end = function () {
      var err, errData = '', outData = '', branch = data.toString().replace('\n', '');
      var cp = spawn('git', ['push', 'origin', branch]);
      var callback = onData('pushed branch ' + branch, 'failed to push branch ' + branch);

      cp.stderr.on('data', function (data) {
        errData += data;
      });

      cp.stdout.on('data', function (data) {
        outData += data;
      });

      cp.on('error', function(e) {
        err = e;
      });

      cp.on('close', function (code) {
        callback(code > 0 ? err || errData : '', outData.toString(), errData.toString());
        this.emit('end');
      }.bind(this));

    };
    return stream;
  }
}

function createTag(version, cb) {
  proc('git tag')
    .pipe('grep ' + version)
    .data(onData('existed tag ' + version, 'not exist tag ' + version))
    .or('git tag ' + version)
    .data(onData('created tag ' + version, 'failed to create tag ' + version))
    .and('git push origin ' + version)
    .data(onData('pushed tag ' + version, 'failed to pushed tag ' + version))
    .on('close', fixCb(cb));
}

function publish(cb) {
  console.log('>> now publish to npm');
  proc('npm publish')
    .data(onData('published ' + version, 'failed to publish ' + version))
    .on('close', fixCb(cb));
}

function onData(success, error) {
  return function(err, stdout, stderr) {
    if (err) {
      console.error('>> ' + color.red(error));
      if (commander.verbose && stderr) {
        console.error(stderr
          .toString()
          .split('\n')
          .filter(function(str) {
            return !!str;
          })
          .map(function(str) {
            return '   ' + color.grey('| ' + str);
          })
          .join('\n')
        );
      }
    } else {
      success && console.log('>> ' + (typeof success === 'function' ? success() : success));
    }
  };
}

function fixCb(cb) {
  return function() {
    process.nextTick(cb);
  };
}
